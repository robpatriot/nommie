# Nommie — Cursor Rules (Workspace)

> Repo-root workspace rules. Applies to all Cursor prompts, edits, refactors, and codegen.

## General
- Follow these rules exactly. If a request would break them, stop and ask.
- No commentary in edits — implement directly.
- Never run any git commands other than diff

## Persistence Design
- Repos and services are **stateless** and **generic** over `C: ConnectionTrait`.
- They take `&C`, so the same code works with a `DatabaseConnection` or a `DatabaseTransaction`.
- Only SeaORM adapters depend on SeaORM; services depend only on repo traits.

## Backend Code
- Handlers return `Result<T, AppError>` — never `HttpResponse`.
- All DB access via `require_db(&state)` or `with_txn(&state, …)`.
- Only **SeaORM adapters** may `use sea_orm::*`.
- Domain modules: no DB or Actix imports.
- Use enums (not strings) for states, roles, and phases.
- No `unwrap()` or `expect()` outside tests.
- Remove unused imports entirely (don’t comment them out).

## Transactions
- All DB work runs through `with_txn` or `require_db`.
- `with_txn` closures return `Result<_, AppError>`.
- Nested transactions only via `SharedTxn` in tests.
- Production: commit on `Ok`, rollback on `Err`.
- Tests: always rollback.
- Never call `begin`, `commit`, or `rollback` directly.

## Extractors
- Allowed: `AuthToken`, `JwtClaims`, `CurrentUser`, `GameId`, `GameMembership`, `ValidatedJson<T>`.
- `ValidatedJson<T>` maps validation errors to `AppError` Problem Details.

## Error Handling
- Errors follow Problem Details: `{ type, title, status, detail, code, trace_id }`.
- Create all errors via central `AppError` helpers.
- `code` comes from the registry (no ad-hoc strings).
- Never leak raw serde/SQL/OAuth errors.

## Logging
- Logs must include `trace_id`.
- Mask or hash PII (emails, google_sub).

## AppState
- `AppState.db` is private — access via `state.db()` / `require_db(&state)`.

## Schema & Migrations
- Schema lives in a single init migration under `apps/backend/migration`.
- Don’t add separate migration files, SQL, or DDL elsewhere.

## Env & pnpm
- Source `.env` once per shell session before any pnpm commands:
  set -a; source .env; set +a
- Never commit real `.env`.
- Don’t read `DATABASE_URL` directly in code.

## Testing
- Tests must be deterministic (seed time/RNG).
- DB tests use `_test` DB (rollback enforced).
- Use `SharedTxn` when tests need continuity.
- Control tests needing committed data must use pooled DB setup.
- Run backend tests with `pnpm be:test`.
